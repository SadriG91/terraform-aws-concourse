#cloud-config
write_files:
  - path: "/concourse/keys/web/tsa_host_key"
    permissions: "0644"
    owner: "root"
    encoding: base64
    content: ${base64encode(tsa_host_key)}
  - path: "/concourse/keys/web/session_signing_key"
    permissions: "0644"
    owner: "root"
    encoding: base64
    content: ${base64encode(session_signing_key)}
  - path: "/concourse/keys/web/authorized_worker_keys"
    permissions: "0644"
    owner: "root"
    encoding: base64
    content: ${base64encode(authorized_worker_keys)}
  - path: "/etc/systemd/system/concourse.service"
    permissions: "0644"
    owner: "root"
    content: |
      [Unit]
      Description=Service for Concourse ATC/TSA
      Requires=network-online.target
      After=network-online.target

      [Service]
      Type=simple
      Restart=always
      RestartSec=30s
      TimeoutStartSec=5m
      TimeoutStopSec=1h

      Environment="CONCOURSE_GITHUB_CLIENT_ID=${github_client_id}"
      Environment="CONCOURSE_GITHUB_CLIENT_SECRET=${github_client_secret}"
      Environment="CONCOURSE_POSTGRES_HOST=${postgres_host}"
      Environment="CONCOURSE_POSTGRES_PORT=${postgres_port}"
      Environment="CONCOURSE_POSTGRES_USER=${postgres_username}"
      Environment="CONCOURSE_POSTGRES_PASSWORD=${postgres_password}"
      Environment="CONCOURSE_POSTGRES_DATABASE=${postgres_database}"
      Environment="CONCOURSE_EXTERNAL_URL=${concourse_web_host}"
      Environment="CONCOURSE_LOG_LEVEL=${log_level}"
      Environment="CONCOURSE_TSA_LOG_LEVEL=${log_level}"
      Environment="CONCOURSE_TSA_HOST_KEY=/concourse/keys/web/tsa_host_key"
      Environment="CONCOURSE_TSA_AUTHORIZED_KEYS=/concourse/keys/web/authorized_worker_keys"
      Environment="CONCOURSE_SESSION_SIGNING_KEY=/concourse/keys/web/session_signing_key"
      Environment="CONCOURSE_ENCRYPTION_KEY=${encryption_key}"
      Environment="CONCOURSE_OLD_ENCRYPTION_KEY=${old_encryption_key}"
      Environment="CONCOURSE_AWS_SECRETSMANAGER_REGION=${region}"

      %{ if local_user != "" }Environment="CONCOURSE_ADD_LOCAL_USER=${local_user}"%{ endif }
      %{ if local_admin_user != "" }Environemnt="CONCOURSE_MAIN_TEAM_LOCAL_USER=${local_admin_user}"%{ endif }
      %{ if length(github_users) > 0 }Environment="CONCOURSE_MAIN_TEAM_GITHUB_USER=${join(",", github_users)}"%{ endif }
      %{ if length(github_teams) > 0 }Environment="CONCOURSE_MAIN_TEAM_GITHUB_TEAM=${join(",", github_teams)}"%{ endif }
      %{ if prometheus_enabled }Environment="CONCOURSE_PROMETHEUS_BIND_IP=0.0.0.0"%{ endif }
      %{ if prometheus_enabled }Environment="CONCOURSE_PROMETHEUS_BIND_PORT=${prometheus_bind_port}"%{ endif }

      ExecStartPre=/bin/bash -c "/bin/systemctl set-environment CONCOURSE_PEER_ADDRESS=$(curl -L http://169.254.169.254/latest/meta-data/local-ipv4)"
      ExecStart=/usr/local/bin/aws-env exec -- /usr/local/concourse/bin/concourse web

      [Install]
      WantedBy=multi-user.target
  - path: "/usr/local/scripts/cloudformation-signal.sh"
    permissions: "0744"
    owner: "root"
    content: |
      #! /usr/bin/bash

      set -euo pipefail

      state=""
      INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

      until [ "$state" == "\"healthy\"" ]; do
          sleep 10
          state=$(aws --region ${region} elbv2 describe-target-health \
              --targets Id=$${INSTANCE_ID},Port=${tsa_port} \
              --target-group-arn ${target_group} \
              --query TargetHealthDescriptions[0].TargetHealth.State)
          echo "State is $${state}"
      done
runcmd:
  - |
    /usr/local/scripts/cloudformation-signal.sh
    /opt/aws/bin/cfn-signal -e $? --stack ${stack_name} --resource AutoScalingGroup --region ${region}
